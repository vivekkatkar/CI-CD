name: CI/CD Pipeline

on:
  push:
    branches: [master]
    paths-ignore: 
      - "README.md"
  pull_request: 
    branches: [master]

jobs:
  test:
    name: Unit Testing
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout Code 
        uses: actions/checkout@v4 
    
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: '20'
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm install 

      - name: Run tests
        run: npm test || echo "No tests found in this project"

  lint:
    name: Static code analysis
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: '20'
          cache: 'npm'
      
      - name: Install Dependencies 
        run: npm install 
      
      - name: Run ESLint 
        run: npm run lint 
  
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps: 
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies 
        run: npm install 

      - name: Build Project
        run: npm run build 

      - name: Upload build artifacts 
        uses: actions/upload-artifact@v4
        with: 
          name: build-artifacts
          path: dist/
    
  docker:
    name: Docker build and push 
    runs-on: ubuntu-latest
    needs: [build]
    env: 
      REGISTRY: ghcr.io 
      IMAGE_NAME: ${{ github.repository }}
    steps: 
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with: 
          name: build-artifacts
          path: dist/
      
      - name: Set up Docker buildx 
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Github Container Registry 
        uses: docker/login-action@v3
        with: 
          registry: ${{env.REGISTRY}}
          username: ${{github.actor}}
          password: ${{secrets.TOKEN}}

      - name: Extract metdata from docker
        id: meta
        uses: docker/metadata-action@v5
        with: 
          images: ${{env.REGISTRY}}/${{env.IMAGE_NAME}}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
      
      - name: Build docker image 
        uses: docker-build-push-action@v5
        with: 
          context: .
          push: false
          tags: ${{steps.meta.outputs.tags}}
          labels: ${{steps.meta.outputs.labels}}
          load: true 

      - name: Run trivy vuleneribiliy scanner 
        uses: aquasecurity/trivy-action@master
        with: 
          image-ref: ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:sha-${{github.sha}}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true 
          vuln-type: 'os-library'
          severity: 'CRITICAL,HIGH'
      
      - name: Push Docker image
        uses: docker/build-push-action@v5 
        with:
          context: .
          push: true
          tags: ${{steps.meta.outputs.tags}}
          labels: ${{steps.meta.outputs.labels}}
      
      - name: Set image tag output 
        id: set_output
        run: echo "Image_tag=$(echo ${{github.sha}} | cut -c1-7)" >> $GITHUB_OUTPUT
      
  update-k8s: 
    name: Update kubernetes deployment 
    runs-on: ubantu-latest 
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with: 
          token: ${{secrets.TOKEN}}
      
      - name: Setup git config 
        run: |
          git config user.name "Github Actions"
          git config user.email "actions@github.com"
        
      - name: Update kubernetes deployment file
        env:
          IMAGE_TAG: sha-${{github.sha}}
          GITHUB_REPOSITORY: ${{github.repository}}
          REGISTRY: ghcr.io
        run: |
          $ Define the new image with tag
          NEW_IMAGE="${REGISTRY}/${GITHUB_REPOSITORY}:${IMAGE_TAG}"

          $ Update the image in the deployment file
          send -i "s|image: ${REGISTRY}/${GITHUB_REPOSITORY}:.*|image: ${NEW_IMAGE}|g" kubernetes/deployment.yaml

          # Verify the changes
          echo "Updated deployment to use image : ${NEW_IMAGE}"
          grep -A 1 "image:" kubernetes/deployment.yaml
      
      - name: Commit and push changes
        run: |
          git add kubernetes/deployment.yaml
          git commit -m "Update deployment to use image sha-${{github.sha}}"
          git push origin main